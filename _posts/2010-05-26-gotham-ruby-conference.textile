---
title: "Gotham Ruby Conference 2010: A Recap"
layout: blog
published: true
---

Over the weekend I attended the fourth "Gotham Ruby Conference":http://www.goruco.com/ (GoRuCo). The conference was well-organized, the content was top-notch and there were tons of great people there.

!http://farm4.static.flickr.com/3306/4629071041_8b0b0c7c36.jpg!
"Photo by sd":http://www.flickr.com/photos/sd/

The day opened with a welcome from a Pace University's Jonathan Hill. Jonathan, who is assistant dean of Pace's Computer Science program, explained that GoRuCo has been held at Pace since its first year and that Pace and the New York Ruby community have a longstanding relationship. Pace uses Ruby and Rails extensively in its Computer Science program and its graduates often find employment through this community. Jonathan expressed real appreciation for the health and energy of the Ruby community in New York. It was neat that there was more of a connection between GoRuCo and Pace than just renting a space.

Nick Gauthier presented the first talk, Grease Your Suite, on making slow test suites faster. This talk demonstrated how he improved a test suite in a Rails project from 13 minutes down to under 20 seconds. To do this, Nick used lifo's "fast_context":http://github.com/lifo/fast_context, his own "Hydra":http://github.com/ngauthier/hydra for distributing tests across CPU cores or machines, and Ruby Enterprise Edition for its ability to tune Ruby's garbage collection. He also gained speed by mocking PaperClip's image manipulation, using fixtures to replace truly-resized images. Nick got further performance by tweaking a journaling setting for the @ext4@ filesystem (Nick is a staunch Linux-on-the-desktop user), as well as by disabling @atime@. Nick noted that the improvements from these tweaks gain as much in speed as running tests on a solid state drive. With such a fast test suite, a Continuous Integration server returns to having the job it should have -- ensuring a green build in a production-like environment. While I don't have any huge 10+ minute suites, I nonetheless left this talk with strategies for greasing my suite.

The next talk, by Aman Gupta, was on a new Ruby profiling tool, Memprof. Aman provided a tour of the tools he'd worked with for profiling Ruby's memory use: @ObjectSpace.each_object@, gdb.rb, bleak_house, and patching Ruby in order for it to provide heap dumps. These tools are all helpful, he said, but they require writing patching or running special versions of Ruby, or don't provide complete enough information on the contents of the objects in memory or their context in code. Memprof, created by Joe Damato with contributions from Aman, solves the above problems: Installing it is simple (@gem install memprof@), use is simple (@Memprof.dump_all@, for example), it outputs to JSON, and provides all the necessary information and context about objects in memory, including references between objects. Memprof's JSON output makes it easy to dump its output into a database like MongoDB, which "memprof.com":http://memprof.com/ does. Aman's talk struck at just the right level: deep enough to keep us interested, but not so deep as to lose the audience. And if you've ever checked out "Aman and Joe's blog":http://timetobleed.com/ you'll know how deep this this rabbit hole goes. So Kudos to Aman for that.

Luke Melia presented a talk called Managing Rubyists. This talk was directed at Ruby developers who manage a team of Ruby developers. This was the only non-technical, and it was one of the highlights. The talk laid out 15 principles for managers to follow for happiness, motivation, productivity and growth. Luke sounds like an awesome guy to work for. I was heartened to learn that there are managers that take their craft as seriously as Rubyists do.

After lunch, Chris Williams (of JSConf fame) presented Rails Caching Ã  la JavaScript. In his talk, Chris made the case a straightforward approach to working around performance issues with Rails: using page caching to avoid the Rails stack altogether for most requests, and making JSONP AJAX requests to retrieve the personalized aspects of a page. Even though this AJAX request is handled by Rails, its rendering overhead is offloaded to the client (Chris recommends "mustache.js":http://github.com/janl/mustache.js for client-side rendering). Despite Chris' preface that the technique described is not ideal for most Rails applications, the talk drew skepticism and ire from the audience. Nonetheless, the talk was enjoyable, humorous, and made a strong argument for a straightforward caching strategy.

Next, Alex MacCaw showcased Bowline (pronounced "bowlin'" "the knot":http://en.wikipedia.org/wiki/Bowline), a new framework for creating GUI apps for OS X and Linux using Ruby, JavaScript and WebKit. Alex gave a tour of developing an app with Bowline, showing off its in-memory model layer, "SuperModel":http://github.com/maccman/supermodel, its bindings between Ruby and JavaScript and neat features such as seamless background updates for installed applications and synchronizing data across remote client apps. In all, Bowline looks to be a very ambitious and promising project.

Paul Dix, author of the forthcoming "Service Oriented Architecture with Ruby on Rails":http://www.amazon.com/Service-Oriented-Design-Ruby-Rails-Paul/dp/0321659368, presented on how to scale. Not how to scale an app in the infrastructure sense, but how to scale as complexity and team size grow. Paul described how ActiveModel makes it possible to build models that, unlike ActiveRecord or ActiveResource, are not explicitly bound to database or internet connections. The concepts presented in this talk ought to help address "some":http://jamesgolick.com/2010/3/14/crazy-heretical-and-awesome-the-way-i-write-rails-apps.html "frustrations":http://www.paperplanes.de/2010/5/7/activerecord_callbacks_ruined_my_life.html that've been voiced in the Rails community lately. Definitely look out for Paul's book this August.

The last talk of the day, Scaling to Hundreds of Millions of Requests, was presented by James Golick. In this talk, James outlined how he improved performance and scaled a very active "community site":http://fetlife.com/. James shared his experience moving from Amazon EC2 to physical hardware and the immense performance increase this brought. James also went through his trials with MongoDB, using MySQL "non-relationally" MySQL with "Friendly":http://friendlyorm.com/, before finally Cassandra. As James argued in "a recent blog post":http://jamesgolick.com/2010/3/30/what-does-scalable-database-mean.html Cassandra is one of the NoSQL databases that truly scales horizontally.

The final hour of the conference comprised of "Rejectconf," a round of lightning talks and a chance to speak for people whose talks weren't accepted for the conference program. Some highlights were Pat Nakajima presenting his "Bookmarklet Factory":http://bookmarklets.heroku.com/ ("how to downvote 100 Gizmodo comments"); Edward Ocampo-Gooding presenting on "open data in Ottawa":http://www.openottawa.org/; Aaron Quint presenting on "Jim":http://github.com/quirkey/jim, the JavaScript manager/bundler/compressor; and Michael Bernstein presenting on "Ohm":http://github.com/soveran/ohm, the Redis object mapper with an "extensive contrib collection":http://github.com/sinefunc/ohm-contrib. Then it was beer time.

In all it was a great conference. Thanks to the conference organizers and hello to all the folks I met. And hello to all the folks I didn't get a chance to meet but wish I had. Keep your eyes peeled on "the conference site":http://www.goruco.com/; videos will be posted in the next two weeks.
